{"ast":null,"code":"var _jsxFileName = \"D:\\\\my_app\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet data = {\n  title: 'title',\n  paragraphs: [{\n    paragraph: \"Hello Guys! I just want to tell you how much I love Computer Science\",\n    annotations: [{\n      start: 1,\n      end: 10,\n      color: \"yellow\"\n    }, {\n      start: 15,\n      end: 20,\n      color: \"red\"\n    }]\n  }, {\n    paragraph: \"Hey Guys! I am just getting started using React and JavaScript!\",\n    annotations: [{\n      start: 1,\n      end: 10,\n      color: \"blue\"\n    }, {\n      start: 18,\n      end: 50,\n      color: \"green\"\n    }]\n  }]\n};\n\nfunction App() {\n  /*\n  let obj = [['Ce','red'],['Mai','white'],['Faci','blue']]\n  const elements = obj.map(word =>\n   <span style={{backgroundColor:word[1]}}>{word[0]} </span>) \n   return (\n      <div> \n          {elements}\n      </div>\n  );\n  }\n  */\n\n  /*\n    let P = [\n        {text: \"Ce mai faci\", start: 3, end: 5},\n        {text: \"Eu sunt foarte bine\", start: 4, end: 10},\n        {text: \"Tu cum esti\", start: 2, end: 3},\n        {text: \"Sper ca esti bine\", start: 5, end: 6}\n    ]\n  \n    let Elements = []\n    for(let i=0;i<4;i++)\n    {\n      let S = [] \n      \n      for(let j=0;j<P[i].text.length;j++)\n          S.push(P[i].text[j])\n      \n      const elem = S.map(letter =>\n          <span>{letter}</span>)\n  \n      Elements.push(S)\n      \n    }\n  \n    Elements = Elements.map(word =>\n        <div>{word}</div>)\n  \n  \n  return(<div>{Elements}</div>)\n  }\n  \n  */\n  let HTMLElements = [];\n\n  for (let i = 0; i < data.paragraphs.length; i++) {\n    let storeCharacter = []; //Create new array with two fields. \n    //One holds the character and the other one the color of the highlighting.\n\n    for (let j = 0; j < data.paragraphs[i].paragraph.length; j++) storeCharacter.push([data.paragraphs[i].paragraph[j], 'white']); //Fill in with the interval color \n\n\n    for (let j = 0; j < data.paragraphs[i].annotations.length; j++) {\n      let START = data.paragraphs[i].annotations[j].start;\n      let END = data.paragraphs[i].annotations[j].end;\n\n      for (let l = START; l < END; l++) storeCharacter[l][1] = data.paragraphs[i].annotations[j].color;\n    } //Wrap every character in a span / Create an array of JSX Elements \n\n\n    let elem = [];\n\n    for (let j = 0; j < storeCharacter.length; j++) {\n      let character = storeCharacter[j][0];\n      let color = storeCharacter[j][1];\n      elem.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          backgroundColor: color\n        },\n        children: character\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 23\n      }, this));\n    } //Push and store this array of JSX elements in as a new html element \n\n\n    HTMLElements.push(elem);\n  }\n\n  console.log(HTMLElements); //Separate each paragraph\n\n  HTMLElements = HTMLElements.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 11\n  }, this)); //Return everything\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: HTMLElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 13\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/my_app/src/App.js"],"names":["data","title","paragraphs","paragraph","annotations","start","end","color","App","HTMLElements","i","length","storeCharacter","j","push","START","END","l","elem","character","backgroundColor","console","log","map","word"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\n\nlet data = {\n        title: 'title',\n        paragraphs: [\n        {\n            paragraph: \"Hello Guys! I just want to tell you how much I love Computer Science\",\n            annotations: [\n                {\n                    start: 1,\n                    end: 10, \n                    color: \"yellow\"\n                },\n                {\n                    start: 15,\n                    end: 20,\n                    color: \"red\"\n                }]\n        },\n        {\n          paragraph: \"Hey Guys! I am just getting started using React and JavaScript!\",\n          annotations: [\n              {\n                  start: 1,\n                  end: 10, \n                  color: \"blue\"\n              },\n              {\n                  start: 18,\n                  end: 50,\n                  color: \"green\"\n              }]\n\n        }]\n      }\n\nfunction App() {\n  \n  /*\n  let obj = [['Ce','red'],['Mai','white'],['Faci','blue']]\n\n const elements = obj.map(word =>\n   <span style={{backgroundColor:word[1]}}>{word[0]} </span>) \n\n  return (\n      <div> \n          {elements}\n      </div>\n  );\n}\n*/\n\n/*\n  let P = [\n      {text: \"Ce mai faci\", start: 3, end: 5},\n      {text: \"Eu sunt foarte bine\", start: 4, end: 10},\n      {text: \"Tu cum esti\", start: 2, end: 3},\n      {text: \"Sper ca esti bine\", start: 5, end: 6}\n  ]\n\n  let Elements = []\n  for(let i=0;i<4;i++)\n  {\n    let S = [] \n    \n    for(let j=0;j<P[i].text.length;j++)\n        S.push(P[i].text[j])\n    \n    const elem = S.map(letter =>\n        <span>{letter}</span>)\n\n    Elements.push(S)\n    \n  }\n\n  Elements = Elements.map(word =>\n      <div>{word}</div>)\n\n\nreturn(<div>{Elements}</div>)\n}\n\n*/\n\n    let HTMLElements = []\n    for(let i=0;i<data.paragraphs.length;i++)\n    { \n        let storeCharacter = []\n  \n        //Create new array with two fields. \n        //One holds the character and the other one the color of the highlighting.\n        for(let j=0;j<data.paragraphs[i].paragraph.length;j++)\n            storeCharacter.push([data.paragraphs[i].paragraph[j],'white'])\n        \n\n        //Fill in with the interval color \n        for(let j=0;j<data.paragraphs[i].annotations.length;j++)\n        {\n            let START = data.paragraphs[i].annotations[j].start\n            let END = data.paragraphs[i].annotations[j].end\n            for(let l=START;l<END;l++)\n                storeCharacter[l][1] = data.paragraphs[i].annotations[j].color\n        }\n        \n        //Wrap every character in a span / Create an array of JSX Elements \n        let elem = []\n        for(let j=0;j<storeCharacter.length;j++){\n            let character = storeCharacter[j][0]\n            let color = storeCharacter[j][1]\n            elem.push(<span style={{backgroundColor:color}}>{character}</span>)\n        \n        }\n\n        //Push and store this array of JSX elements in as a new html element \n        HTMLElements.push(elem)\n    }\n\n    console.log(HTMLElements)\n\n    //Separate each paragraph\n    HTMLElements = HTMLElements.map(word => \n          <div><div>{word}</div><br></br></div>)\n    \n    //Return everything\n    return (<div>{HTMLElements}</div>)\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}